// Services
@Service
public class ProductService {

	@Autowired
	private ProductRepository repository;
	
	public List<Product> filterByPriceRange(Integer min, Integer max) {
		return repository.findAll().stream().filter(p -> p.getPrice() >= min && p.getPrice() <= max)
				.collect(Collectors.toList());
	}
	public List<Map<String, String>> filterByPriceRangeBar(Integer min, Integer max) {
		return repository.findAll().stream().filter(p -> p.getPrice() >= min && p.getPrice() <= max)
				.map(p->{
					Map<String, String> m= new HashMap<>();
					m.put("barcode",p.getBarcode());
					return m;
				}
						)
				.collect(Collectors.toList());
	}
	public List<Map<String, String>> sortByPriceBar() {
		return repository.findAll().stream().sorted(Comparator.comparing(Product::getPrice)).map(
				p->{
					Map<String, String> m= new HashMap<>();
					m.put("barcode",p.getBarcode());
					return m;
					
				})
				.collect(Collectors.toList());
	}
	
	public List<Product> sortByPrice() {
		return repository.findAll().stream().sorted(Comparator.comparingInt(Product::getPrice))
				.collect(Collectors.toList());
	}
	
	public Product saveProduct(Product product) {
		return repository.save(product);
	}

	public List<Product> getProduct() {
	
		return repository.findAll();
	}	

}

// Contoller

@RestController
@RequestMapping
public class ProductController {
	@Autowired
	private ProductService productService;
	@PostMapping("/add")
	public ResponseEntity<Product> createProducts(@RequestBody Product product) {
	    return ResponseEntity.ok(productService.saveProduct(product));
	}
	@GetMapping("/get")
	public ResponseEntity<List<Product>> getyProducts() {
	    return ResponseEntity.ok(productService.getProduct());
	}


	@GetMapping("/filter/price/{initial_range}/{final_range}")
	public ResponseEntity<List<Product>> getProoductInRange(@PathVariable Integer final_range ,@PathVariable Integer initial_range){
		List<Product> list=productService.filterByPriceRange(initial_range,final_range);
		if(list.isEmpty()) {
			return ResponseEntity.status(400).build();
		}
		return ResponseEntity.status(200).body(list);
		
	}
	@GetMapping("/filter/price/{initial_range}/{final_range}/bar")
	public ResponseEntity<List<Map<String, String>>> getProoductInRangeBar(@PathVariable Integer final_range ,@PathVariable Integer initial_range){
		List<Map<String, String>> list=productService.filterByPriceRangeBar(initial_range,final_range);
		if(list.isEmpty()) {
			return ResponseEntity.status(400).build();
		}
		return ResponseEntity.status(200).body(list);
		
	}

	@GetMapping("/sort/price")
	public ResponseEntity<List<Product>> getSortedProductsWithDetails() {
	    return ResponseEntity.ok(productService.sortByPrice());
	}
	@GetMapping("/sort/price/bar")
	public ResponseEntity<List<Map<String, String>>> getSortedProductsWithDetailsBar() {
	    return ResponseEntity.ok(productService.sortByPriceBar());
	}

	
}

// Repository
public interface ProductRepository extends JpaRepository<Product, String> {
}
